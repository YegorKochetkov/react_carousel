{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","shift","scrollLeft","props","itemWidth","step","setState","prevState","addShift","images","length","scrollRight","prevProps","this","howChangeItemWidth","frameSize","animationDuration","infinite","className","style","width","height","transform","transition","map","image","index","src","alt","String","type","onClick","disabled","React","Component","App","settings","parameter","newValue","min","max","defaultValue","onChange","target","updateSettings","Number","value","defaultChecked","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3779ca85.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\ntype State = {\n  shift: number,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state: State = {\n    shift: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.itemWidth !== this.props.itemWidth) {\n      const howChangeItemWidth = this.props.itemWidth / prevProps.itemWidth;\n\n      this.setState({\n        shift: prevState.shift * howChangeItemWidth,\n      });\n    }\n  }\n\n  scrollLeft = () => {\n    const shift = this.props.itemWidth * this.props.step;\n\n    this.setState((prevState) => {\n      let addShift = prevState.shift + shift;\n\n      if (addShift\n      >= this.props.images.length * this.props.itemWidth) {\n        addShift = 0;\n      }\n\n      return ({\n        shift: addShift,\n      });\n    });\n  };\n\n  scrollRight = () => {\n    const shift = this.props.itemWidth * this.props.step;\n\n    this.setState((prevState) => {\n      let addShift = prevState.shift - shift;\n\n      if (addShift\n      < 0 && prevState.shift !== 0) {\n        addShift = 0;\n      }\n\n      if (addShift\n      < 0 && prevState.shift === 0) {\n        addShift = (this.props.images.length - this.props.step)\n        * this.props.itemWidth;\n      }\n\n      return ({\n        shift: addShift,\n      });\n    });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    return (\n      <>\n        <div\n          className=\"carousel\"\n          style={{\n            width: `${itemWidth * frameSize}px`,\n            height: `${itemWidth + 4}px`,\n          }}\n        >\n          <div\n            className=\"carousel__container\"\n            style={{\n              transform: `translateX(-${this.state.shift}px)`,\n              transition: `transform ${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, index) => (\n              <img\n                key={image + String(index)}\n                src={image}\n                alt={image}\n                style={{\n                  width: `${itemWidth}px`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"carousel__prev-button\"\n            onClick={this.scrollRight}\n            disabled={\n              !infinite\n              && this.state.shift === 0\n            }\n          >\n            {'<'}\n          </button>\n          <button\n            type=\"button\"\n            className=\"carousel__next-button\"\n            onClick={this.scrollLeft}\n            disabled={\n              !infinite\n              && this.state.shift\n                >= (images.length - frameSize)\n                * itemWidth\n            }\n          >\n            {'>'}\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ntype Settings = {\n  frameSize: number;\n  itemWidth: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  images: string[];\n  settings: Settings;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    settings: {\n      step: 3,\n      frameSize: 3,\n      itemWidth: 130,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  };\n\n  updateSettings\n  <T extends keyof Settings>(parameter: T, newValue: Settings[T]) {\n    this.setState(({ settings }) => ({\n      settings: {\n        ...settings,\n        [parameter]: newValue,\n      },\n    }));\n  }\n\n  render() {\n    const { images } = this.state;\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state.settings;\n\n    return (\n      <div className=\"app\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <fieldset className=\"app__settings\">\n          <label className=\"app__setting\">\n            Step:\n            <input\n              className=\"app__step\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              defaultValue={step}\n              onChange={\n                (({ target }) => this\n                  .updateSettings('step', Number(target.value)))\n              }\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Frame size:\n            <input\n              className=\"app__frame-size\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              defaultValue={frameSize}\n              onChange={\n                (({ target }) => this\n                  .updateSettings('frameSize', Number(target.value)))\n              }\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Item width:\n            <input\n              className=\"app__item-width\"\n              type=\"number\"\n              min=\"80\"\n              max=\"180\"\n              step=\"10\"\n              defaultValue={itemWidth}\n              onChange={\n                (({ target }) => this\n                  .updateSettings('itemWidth', Number(target.value)))\n              }\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Anitmation duration:\n            <input\n              className=\"app__animation-duration\"\n              type=\"number\"\n              min=\"0\"\n              max=\"2000\"\n              step=\"500\"\n              defaultValue={animationDuration}\n              onChange={\n                (({ target }) => this\n                  .updateSettings('animationDuration', Number(target.value)))\n              }\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Infinite:\n            <input\n              className=\"app__infinite\"\n              type=\"checkbox\"\n              defaultChecked={infinite}\n              onChange={\n                (({ target }) => this\n                  .updateSettings('infinite', target.checked))\n              }\n            />\n            {\n              infinite\n                ? 'Yes'\n                : 'No'\n            }\n          </label>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}