{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","animationDurationInner","props","animationDuration","isScrollAnimationInnerOn","isScrollAnimationOn","this","images","imageWidth","visibleFrameOfBlockImages","shiftBlockOfImages","shiftInnerBlockOfImages","className","style","width","height","transform","transition","map","image","index","src","alt","String","React","Component","App","settings","stepToShiftBlockOfImages","isInfiniteScrollOn","isPreviousScrollLeftAnimationOver","scrollLeft","setState","shift","rightEgdeOfBlockOfImages","length","addShift","scrollRight","prevImage","splice","handleChange","event","currentTarget","name","value","newValue","checked","Number","newSettings","newImages","setTimeout","isFarLeftImage","isFarRightImage","type","onClick","disabled","min","max","defaultValue","onChange","step","defaultChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c46f909.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  imageWidth: number,\n  visibleFrameOfBlockImages: number,\n  animationDuration: number,\n  isScrollAnimationOn: boolean,\n  shiftBlockOfImages: number,\n  shiftInnerBlockOfImages: number,\n}\n\ntype State = {\n  animationDurationInner: number,\n  isScrollAnimationInnerOn: boolean,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state: State = {\n    animationDurationInner: this.props.animationDuration,\n    isScrollAnimationInnerOn: this.props.isScrollAnimationOn,\n  };\n\n  render() {\n    const {\n      images,\n      imageWidth,\n      visibleFrameOfBlockImages,\n      animationDuration,\n      isScrollAnimationOn,\n      shiftBlockOfImages,\n      shiftInnerBlockOfImages,\n    } = this.props;\n\n    const { animationDurationInner, isScrollAnimationInnerOn } = this.state;\n\n    return (\n      <>\n        <div\n          className=\"carousel\"\n          style={{\n            width: `${imageWidth * visibleFrameOfBlockImages}px`,\n            height: `${imageWidth + 4}px`,\n          }}\n        >\n          <div\n            className=\"carousel__container\"\n            style={{\n              transform: `translateX(${shiftBlockOfImages}px)`,\n              transition: `transform ${isScrollAnimationOn ? animationDuration : 0}ms`,\n            }}\n          >\n            <div\n              style={{\n                transform: `translateX(${shiftInnerBlockOfImages}px`,\n                transition: `transform ${isScrollAnimationInnerOn ? animationDurationInner : 0}ms`,\n              }}\n            >\n              {images.map((image, index) => (\n                <img\n                  key={image + String(index)}\n                  src={image}\n                  alt={image}\n                  style={{\n                    width: `${imageWidth}px`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ntype Settings = {\n  visibleFrameOfBlockImages: number;\n  imageWidth: number;\n  stepToShiftBlockOfImages: number;\n  isScrollAnimationOn: boolean,\n  animationDuration: number;\n  isInfiniteScrollOn: boolean;\n  shiftBlockOfImages: number,\n  shiftInnerBlockOfImages: number,\n  isPreviousScrollLeftAnimationOver: boolean,\n};\n\ntype State = {\n  images: string[];\n  settings: Settings;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    settings: {\n      imageWidth: 130,\n      visibleFrameOfBlockImages: 3,\n      stepToShiftBlockOfImages: 3,\n      animationDuration: 1000,\n      isScrollAnimationOn: true,\n      isInfiniteScrollOn: false,\n      shiftBlockOfImages: 0,\n      shiftInnerBlockOfImages: 0,\n      isPreviousScrollLeftAnimationOver: false,\n    },\n  };\n\n  componentDidUpdate() {\n    const {\n      imageWidth,\n      stepToShiftBlockOfImages,\n      animationDuration,\n      isScrollAnimationOn,\n      isInfiniteScrollOn,\n      isPreviousScrollLeftAnimationOver,\n    } = this.state.settings;\n\n    const { images } = this.state;\n\n    if (!isScrollAnimationOn && !isInfiniteScrollOn) {\n      const newSettings = this.state.settings;\n\n      this.setState({\n        settings: {\n          ...newSettings,\n          isScrollAnimationOn: true,\n          shiftBlockOfImages: 0,\n          shiftInnerBlockOfImages: 0,\n        },\n      });\n    }\n\n    if (isPreviousScrollLeftAnimationOver\n      && isInfiniteScrollOn) {\n      const prevImage = images.splice(0, stepToShiftBlockOfImages);\n      const newImages = [...images, ...prevImage];\n      const shift = imageWidth * stepToShiftBlockOfImages;\n\n      setTimeout(() => {\n        this.setState(({ settings }) => {\n          const {\n            shiftBlockOfImages,\n            shiftInnerBlockOfImages,\n          } = settings;\n\n          return ({\n            images: newImages,\n            settings: {\n              ...settings,\n              isScrollAnimationOn: false,\n              shiftBlockOfImages: shiftBlockOfImages + shift,\n              shiftInnerBlockOfImages,\n              isPreviousScrollLeftAnimationOver: false,\n            },\n          });\n        });\n      }, animationDuration);\n    }\n  }\n\n  scrollLeft = () => {\n    const {\n      isInfiniteScrollOn,\n      isPreviousScrollLeftAnimationOver,\n    } = this.state.settings;\n\n    if (isInfiniteScrollOn && !isPreviousScrollLeftAnimationOver) {\n      this.setState(({ settings }) => {\n        const {\n          imageWidth,\n          stepToShiftBlockOfImages,\n          shiftBlockOfImages,\n          shiftInnerBlockOfImages,\n        } = settings;\n\n        const shift = imageWidth * stepToShiftBlockOfImages;\n\n        return ({\n          settings: {\n            ...settings,\n            isScrollAnimationOn: true,\n            shiftBlockOfImages: shiftBlockOfImages - shift,\n            shiftInnerBlockOfImages,\n            isPreviousScrollLeftAnimationOver: true,\n          },\n        });\n      });\n    }\n\n    if (!isInfiniteScrollOn) {\n      this.setState(({ images, settings }) => {\n        const {\n          imageWidth,\n          visibleFrameOfBlockImages,\n          stepToShiftBlockOfImages,\n          shiftBlockOfImages,\n        } = settings;\n\n        const shift = imageWidth * stepToShiftBlockOfImages;\n\n        const rightEgdeOfBlockOfImages\n          = -((images.length - 1) - visibleFrameOfBlockImages) * imageWidth;\n\n        let addShift = shiftBlockOfImages - shift;\n\n        if (addShift\n            < rightEgdeOfBlockOfImages) {\n          addShift = rightEgdeOfBlockOfImages - imageWidth;\n        }\n\n        return ({\n          images,\n          settings: {\n            ...settings,\n            shiftBlockOfImages: addShift,\n          },\n        });\n      });\n    }\n  };\n\n  scrollRight = () => {\n    const {\n      isInfiniteScrollOn,\n    } = this.state.settings;\n\n    if (isInfiniteScrollOn) {\n      this.setState(({ images, settings }) => {\n        const {\n          imageWidth,\n          stepToShiftBlockOfImages,\n          shiftBlockOfImages,\n          shiftInnerBlockOfImages,\n        } = settings;\n\n        const prevImage = images.splice(-stepToShiftBlockOfImages);\n        const newImages = [...prevImage, ...images];\n        const shift = imageWidth * stepToShiftBlockOfImages;\n\n        return ({\n          images: newImages,\n          settings: {\n            ...settings,\n            shiftBlockOfImages: shiftBlockOfImages - shift,\n            shiftInnerBlockOfImages: shiftInnerBlockOfImages + shift,\n            isScrollAnimationOn: false,\n          },\n        });\n      });\n    }\n\n    if (!isInfiniteScrollOn) {\n      this.setState(({ images, settings }) => {\n        const {\n          imageWidth,\n          stepToShiftBlockOfImages,\n          shiftBlockOfImages,\n        } = settings;\n\n        const shift = imageWidth * stepToShiftBlockOfImages;\n\n        let addShift = shiftBlockOfImages + shift;\n\n        if (shiftBlockOfImages + shift > 0) {\n          addShift = 0;\n        }\n\n        return ({\n          images,\n          settings: {\n            ...settings,\n            shiftBlockOfImages: addShift,\n          },\n        });\n      });\n    }\n  };\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n    const newValue = (name === 'isInfiniteScrollOn')\n      ? event.currentTarget.checked\n      : Number(value);\n\n    this.setState(({ settings }) => ({\n      settings: {\n        ...settings,\n        [name]: newValue,\n      },\n    }));\n  };\n\n  render() {\n    const { images } = this.state;\n\n    const {\n      imageWidth,\n      visibleFrameOfBlockImages,\n      stepToShiftBlockOfImages,\n      animationDuration,\n      isScrollAnimationOn,\n      isInfiniteScrollOn,\n      shiftBlockOfImages,\n      shiftInnerBlockOfImages,\n    } = this.state.settings;\n\n    const rightEgdeOfBlockOfImages\n      = -((images.length - 1) - visibleFrameOfBlockImages) * imageWidth;\n\n    const isFarLeftImage = !isInfiniteScrollOn && shiftBlockOfImages >= 0;\n    const isFarRightImage = !isInfiniteScrollOn\n      && shiftBlockOfImages < rightEgdeOfBlockOfImages;\n\n    return (\n      <div className=\"app\">\n        <h1>\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          imageWidth={imageWidth}\n          visibleFrameOfBlockImages={visibleFrameOfBlockImages}\n          animationDuration={animationDuration}\n          isScrollAnimationOn={isScrollAnimationOn}\n          shiftBlockOfImages={shiftBlockOfImages}\n          shiftInnerBlockOfImages={shiftInnerBlockOfImages}\n        />\n        <div className=\"carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"carousel__prev-button\"\n            onClick={this.scrollRight}\n            disabled={isFarLeftImage}\n          >\n            {'<'}\n          </button>\n          <button\n            type=\"button\"\n            className=\"carousel__next-button\"\n            onClick={this.scrollLeft}\n            disabled={isFarRightImage}\n\n          >\n            {'>'}\n          </button>\n        </div>\n        <fieldset className=\"app__settings\">\n          <label className=\"app__setting\">\n            Step:\n            <input\n              className=\"app__step\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              defaultValue={stepToShiftBlockOfImages}\n              name=\"stepToShiftBlockOfImages\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Frame size:\n            <input\n              className=\"app__frame-size\"\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              defaultValue={visibleFrameOfBlockImages}\n              name=\"visibleFrameOfBlockImages\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Item width:\n            <input\n              className=\"app__item-width\"\n              type=\"number\"\n              min=\"80\"\n              max=\"180\"\n              step=\"10\"\n              defaultValue={imageWidth}\n              name=\"imageWidth\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Anitmation duration:\n            <input\n              className=\"app__animation-duration\"\n              type=\"number\"\n              min=\"0\"\n              max=\"2000\"\n              step=\"500\"\n              defaultValue={animationDuration}\n              name=\"animationDuration\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label className=\"app__setting\">\n            Infinite:\n            <input\n              className=\"app__infinite\"\n              type=\"checkbox\"\n              name=\"isInfiniteScrollOn\"\n              defaultChecked={isInfiniteScrollOn}\n              onChange={this.handleChange}\n            />\n            {\n              isInfiniteScrollOn\n                ? 'Yes'\n                : 'No'\n            }\n          </label>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}